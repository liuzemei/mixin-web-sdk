import * as asset from './lib/asset';
import * as browser from './lib/browser';
import * as message from './lib/message';
export declare const Mixin: {
    readAssets: (token: string) => Promise<import("./types").Asset[]>;
    readAsset: (token: string, id: string) => Promise<import("./types").Asset>;
    readFriends: (token: string) => Promise<import("./types").User[]>;
    readBlockingUser: (token: string) => Promise<import("./types").User[]>;
    readSnapshots: (token: string) => Promise<import("./types").Snapshot[]>;
    readSnapshot: (token: string, id: string) => Promise<import("./types").Snapshot>;
    readConversation: (token: string, id: string) => Promise<import("./types").Conversation>;
    toAuthPage: (params: import("./types").AuthParams) => void;
    openUserModal: (user_id: string) => void;
    openConversation: (conversation_id: string, user?: string) => void;
    openAppHomePage: (app_id: string, params: object, action?: string) => void;
    openCodeModal: (code_id: string) => void;
    readNetworkChains: () => Promise<import("./types").Asset[]>;
    readNetworkSnapshots: (params: import("./types").SnapshotQuery) => Promise<import("./types").Snapshot[]>;
    readNetworkSnapshot: (id: string) => Promise<import("./types").Snapshot>;
    readExternalTransactions: (params: import("./types").SnapshotQuery) => Promise<import("./types").Transaction[]>;
    readNetworkAssetsTop: () => Promise<import("./types").Asset[]>;
    readNetworkAssetsMultisig: () => Promise<import("./types").Asset[]>;
    readNetworkAsset: (id: string) => Promise<import("./types").Asset>;
    searchNetworkAsset: (assetNameOrSymbol: string) => Promise<import("./types").Asset[]>;
    readExternalAddressesCheck: (params: import("./types").SnapshotQuery) => Promise<import("./types").SnapshotQuery>;
    readNetworkTicker: (asset_id: string, offset?: string) => Promise<import("./types").NetworkTicker>;
    pay: (payment: import("./types").PaymentParams) => void;
    checkIsPaid: (p: import("./types").Payment) => Promise<any>;
    openSnapshot: (params: asset.SnapshotParams) => void;
    openTransfer: (user_id: string) => void;
    addAddress: (address: asset.Address) => void;
    removeAddress: (address: asset.Address) => void;
    withdrawal: (payment: import("./types").PaymentParams) => void;
    shareTextToFriend: (text: string) => void;
    shareImageToFriend: (url: string) => void;
    shareContactToFriend: (user_id: string) => void;
    shareAppCardToFriend: (appCard: message.AppCard) => void;
    shareLiveToFriend: (liveCard: message.LiveCard) => void;
    sharePostToFriend: (post: any) => void;
    getContext: () => browser.MixinContext;
    environment: () => string;
    isImmersive: () => boolean;
    getVersion: () => string;
    getMixinVersion: () => string;
    getConversationID: () => string;
    getTheme: () => string;
    changeTheme: (theme: string) => void;
    checkMixinVersionBiggerThanTarget: (targetVersion: string) => boolean;
    audiosPlayList: (audios: string[]) => any;
    mixinRequest: (url: string, params?: Object, method?: string, data?: Object) => Promise<any>;
    mixinSchema: (url: string, params?: string | Object) => void;
};
export default Mixin;
